
Att läsa på:

getter/setter, oop
- används för att sätta hemliga/privata attribut, kan också passa
  på att köra felhantering där i.

# Getter måste vara först, för att definiera funktionen med
# attributnamnet! Annars fungerar inte settern (vilket är en
# dekorator).
# Getter: Definierar funktion av attributet till settern
@property
def attrname(self) -> return-type:
    return self._attrname
# Setter:
@attrname.setter
def attrname(self, value):
    ERRORCHECKS
        self._attrname = value


filhantering, syntax, läsa och spara/skriva filer  DONE
- string.split(divider) : splitar en sträng i element
- divider.join(string): joinar element till ett med divider emellan
- sträng.strip(tecken): tar bort alla "tecken" i ändarna av elementet
- sträng.replace("tecken", "tecken2"): byter ut alla "tecken" mot "tecken2"
- eval("Sträng"): kan plocka ut och göra tuple av vad som finns i strängar med data
  t.ex., eval("(2,3)") ger tuple (2,3), går att göra om till lista med
  list(eval("(2,3)"), eval gör om strängen till kod.
- with open(filnamn, 'r' eller 'w' eller 'a') as filobject:


regular expressions
- flera steg
1. import re 
2. olika funktioner sen. T.ex.
re.findall(info,sträng) - extraherar all info från sträng
re.search - ger true om en söksträng finns i strängen
re.split - splittar strängen i det man söker på
3. olika re
[] - range: [A-F] ger ABCDEF, [a-f] med små bokstädr, [1-9] etc
\d är digits, \d\d dubbeldigits etc
{} antal gånger föregående ska förekomma, l{3}, letar efter lll


felhantering, raise Type/ValueError   DONE
- Exempel
Funktioner för att kolla kolla att värden är en viss typ
if not isinstance(value, str eller (float,int)):
    raise TypeError("Fel typ!")
else:
    return True
Eller att värdena är inom en viss range
if 0 <= value <= 100:
    return True
else:
    raise ValueError("value måste vara mellan 0 och 100!")

För att testa utan kaos-fel och stopp
try:
    errorunktion(input):
except Value/TypeError as err:
    print(err)


Anonyma funktioner, lambda expressions:
- Syntax:
lambda : function(utan input)
lambda x: function(x)
lambda x, y: function(x,y)

- Anonym function med namn:
func = lambda x: function(x)
> func(2) -> function(x=2)

- Sortering med lambdaexp
listname = ["Förnamn efternamn1", "Förnamn efternamn2", "Förnamn efternamn3"]

listname.sort(key=lambda name: name.split(" ")[-1].lower())
name.split delar upp för och efternamn av varje element (som vi kallar name) i listname
[-1] tar efternamnet, lower() ser till att den ser alla orden i små bokstäver ifall nån skriver skumt och glömmer shift etc.


--------------------------------------------------------------------------------

Uppgift1
--------
1: Importerar matplotlib, paketet för att plotta figurer.
3: Skapar listan x som innehåller siffrorna 0,1,2,3...9
4: Skapar en lista y, som innehåller kvadraterna av x-listans element, 0**2, 1**2, 2**2, .. 9**2
5: Skapar objeckten fig och ax inför plotning av figur
6: Plotta y som funktion av x (plottar en parabel)
7: Ändrar inställningar till plotten, titeln blir Plot, x och y-axlarna får labels x och y.


Uppgift2
--------
import random as rnd

Ndice = int(1e6)
result = list(range(1,7))
Nresults = [0 for _ in range(6)]

for _ in range(Ndice):
    for i,die in enumerate(result):
        if rnd.randin(6) == die:
            Nresult[i] += 1


Uppgift3
--------
import numpy as np

def volume_sphere(radius:float) -> float:
    if not isinstance(radius,(int,float)):
        raise TypeError(f"Radius must be float or int, not {type(radius)}")
    elif radius <= 0:
        raise ValueError("Radius can not be equal or smaller than zero")
    # Compute volume
    volume = 4/3 * np.pi * radius**3
    return volume



Uppgift4
--------

with open('bamba.txt', 'r') as bambafile:
    bambalist = bambafile.readlines()
for line in bambalist:
    print(line)


Uppgift5
--------

import numpy as np

def comp_distance(coord1,coord2):
    x1,y1 = coord1[0],coord1[1]
    x2,y2 = coord2[0],coord2[1]
    distance = np.sqrt((x1-x2)**2 + (y1-y2)**2)

# Test with test coordinates

with open('testpoints/testpunkter.txt', 'r') as testpunktfile:
    testpoint = testpunktfile.readlines()[1:]

testdata = []

for line in testpoint:
    line = line.replace("(","").replace(")","").replace("\n","").split(",")
    for i in range(0,len(line)-1,2):
        testdata.append([int(line[i]),int(line[i+1])])

distances = []

for i in range(0,len(testdata),2):
    distances.append(comp_distance(testdata[i],testdata[i+1]))
print(distances


Uppgift6
--------

Se ipynb-filen

Uppgift7
--------

Se ipynb-filen

